[{"id":0,"href":"/flux-shared-platform/docs/","title":"Documentation","section":"Flux Shared Platform - Reusable GitOps Components","content":" Documentation # This section contains comprehensive documentation for the Flux Shared Platform, including usage guides, migration instructions, testing procedures, and contributing guidelines.\nSections # Usage Guide - How to use the shared platform in your clusters Migration Guide - Migrating from duplicated manifests to shared components Testing Guide - Validation and testing procedures Contributing Guide - Guidelines for contributing to the project "},{"id":1,"href":"/flux-shared-platform/docs/quick-start/","title":"Quick Start","section":"Documentation","content":" Quick Start Guide # Get up and running with Flux Shared Platform in minutes.\nPrerequisites # Kubernetes cluster with Flux CD installed kubectl and flux CLI tools configured Git repository for your cluster configuration Step 1: Add the Shared Platform Source # Add the flux-shared-platform repository as a GitRepository source:\n# clusters/shared-platform-source.yaml apiVersion: source.toolkit.fluxcd.io/v1 kind: GitRepository metadata: name: flux-shared-platform namespace: flux-system spec: interval: 10m ref: branch: main url: https://github.com/rossigee/flux-shared-platform Apply it to your cluster:\nkubectl apply -f clusters/shared-platform-source.yaml Step 2: Deploy Helm Repositories # First, deploy the shared Helm repositories:\n# clusters/helm-repos.yaml apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: shared-helm-repos namespace: flux-system spec: interval: 30m path: ./helm-repos sourceRef: kind: GitRepository name: flux-shared-platform prune: true kubectl apply -f clusters/helm-repos.yaml Step 3: Deploy Your First Component # Let\u0026rsquo;s deploy cert-manager as an example:\n# clusters/cert-manager.yaml apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager namespace: flux-system spec: interval: 30m path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: cert-manager prune: true healthChecks: - apiVersion: apps/v1 kind: Deployment name: cert-manager namespace: cert-manager kubectl apply -f clusters/cert-manager.yaml Step 4: Verify Deployment # Check that everything is working:\n# Check Flux sources flux get sources git flux get sources helm # Check kustomizations flux get kustomizations # Verify cert-manager pods kubectl get pods -n cert-manager # Check cert-manager is ready kubectl get deployment cert-manager -n cert-manager Step 5: Customize (Optional) # If you need to customize cert-manager for your environment, use Kustomize patches:\n# clusters/cert-manager-custom.yaml apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager-custom namespace: flux-system spec: interval: 30m path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: cert-manager patches: - patch: | - op: replace path: /spec/values/installCRDs value: true - op: add path: /spec/values/resources value: requests: cpu: 100m memory: 128Mi limits: cpu: 200m memory: 256Mi target: kind: HelmRelease name: cert-manager Next Steps # Now you\u0026rsquo;re ready to:\nExplore more components - Check out external-secrets, argo-workflows, and monitoring components Read the Usage Guide - Learn about best practices and advanced configurations Follow the Migration Guide - Migrate existing infrastructure to shared components Set up testing - Use our Testing Guide to validate your deployments Common Next Components # external-secrets - For secret management with HashiCorp Vault argo-workflows - For CI/CD and automation workflows prometheus-operator - For monitoring and alerting kyverno - For policy enforcement and governance Need Help? # Check the Troubleshooting section in our Testing Guide Review our Best Practices Open an issue in the GitHub repository "},{"id":2,"href":"/flux-shared-platform/docs/usage/","title":"Usage Guide","section":"Documentation","content":" Usage Guide # Getting Started # 1. Add as Git Source # First, add the shared platform repository as a GitRepository source in your Flux configuration:\napiVersion: source.toolkit.fluxcd.io/v1 kind: GitRepository metadata: name: flux-shared-platform namespace: flux-system spec: interval: 10m ref: branch: main url: https://github.com/rossigee/flux-shared-platform 2. Use Shared Infrastructure Components # Reference shared infrastructure components in your Kustomizations:\napiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager namespace: flux-system spec: interval: 30m path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform targetNamespace: cert-manager 3. Customize with Patches # Use Kustomize patches to customize shared components for your cluster:\napiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: argo-workflows spec: # ... other fields ... patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;production\u0026#34;, \u0026#34;staging\u0026#34;] target: kind: HelmRelease name: argo-workflows Available Components # Infrastructure Components # cert-manager: Certificate management external-secrets: External secrets operator argo-workflows: Workflow engine Templates # automation/: Image update automation and Discord notifications kustomization/: Common kustomization patterns monitoring/: Prometheus rules and scrape configs rbac/: RBAC templates for SSO and service accounts networking/: Ingress and NetworkPolicy templates Best Practices # Security # Never include secrets in shared configurations Use External Secrets or sealed secrets for sensitive data Review all templates before applying to production Use least-privilege RBAC configurations Customization # Use Kustomize patches instead of forking shared components Keep cluster-specific configurations in your private repository Version pin shared components for stability Test changes in staging environments first Monitoring # Customize monitoring templates for your environment Add cluster-specific alerting rules Configure notification channels appropriately Monitor resource usage and scaling Examples # See the examples/ directory for:\nComplete cluster configurations Component usage patterns Customization examples Integration patterns "},{"id":3,"href":"/flux-shared-platform/docs/migration/","title":"Migration Guide","section":"Documentation","content":" Migration Guide # This guide helps you migrate from duplicated infrastructure manifests to the shared platform components.\nPrerequisites # Existing Flux CD installation Access to modify cluster GitOps repositories Understanding of Kustomize patches Migration Steps # 1. Add Shared Platform Source # Add the shared platform as a GitRepository source:\napiVersion: source.toolkit.fluxcd.io/v1 kind: GitRepository metadata: name: flux-shared-platform namespace: flux-system spec: interval: 20m ref: branch: main url: https://github.com/rossigee/flux-shared-platform 2. Deploy Helm Repositories First # Deploy shared helm repositories before infrastructure components:\napiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: helm-repos namespace: flux-system spec: interval: 30m path: ./helm-repos sourceRef: kind: GitRepository name: flux-shared-platform 3. Migrate Components Gradually # For each component, follow this pattern:\nBefore (Duplicated) # apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager spec: path: ./clusters/production/cert-manager sourceRef: kind: GitRepository name: my-cluster-repo After (Shared + Override) # # Deploy shared component apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager-shared spec: dependsOn: - name: helm-repos path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform targetNamespace: cert-manager --- # Deploy cluster-specific overrides apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager spec: dependsOn: - name: cert-manager-shared path: ./clusters/production/cert-manager sourceRef: kind: GitRepository name: my-cluster-repo targetNamespace: cert-manager 4. Update Cluster-Specific Kustomizations # Remove infrastructure references from cluster kustomizations:\nBefore # apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - ../../../infrastructure/cert-manager # Remove this - automation.yaml - namespace.yaml After # apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - automation.yaml - namespace.yaml # Shared component deployed via cert-manager-shared kustomization 5. Update Dependencies # Update all component dependencies to reference shared versions:\n# Change from: dependsOn: - name: cert-manager # To: dependsOn: - name: cert-manager-shared Component-Specific Migration # Cert-Manager # No customization typically needed Keep cluster-specific automation and namespaces External-Secrets # Update chart version references Maintain cluster-specific CA certificates and secrets Argo Workflows # Customize workflowNamespaces using patches: patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;production\u0026#34;, \u0026#34;staging\u0026#34;] target: kind: HelmRelease name: argo-workflows Testing Strategy # Start with staging environments Deploy one component at a time Verify functionality before proceeding Monitor for reconciliation errors Test cluster-specific customizations Rollback Plan # If issues occur, you can quickly rollback by:\nSuspending shared component kustomizations Re-enabling original infrastructure references Removing shared platform GitRepository source Troubleshooting # Common Issues # Reconciliation Loops\nEnsure old infrastructure references are removed Check for conflicting resource ownership Missing Dependencies\nVerify helm repositories are deployed first Check dependency chains in kustomizations Version Conflicts\nUpdate shared platform to match your current versions Use patches to override specific values Monitoring # Watch Flux reconciliation status:\nflux get kustomizations flux get helmreleases flux logs --follow Benefits After Migration # Reduced Duplication: ~60-70% fewer manifests to maintain Consistency: Shared components ensure uniform configurations Updates: Centralized component version management Community: Contribute and benefit from shared improvements "},{"id":4,"href":"/flux-shared-platform/docs/testing/","title":"Testing Guide","section":"Documentation","content":" Testing Guide # This guide provides instructions for testing the flux-shared-platform migration and components.\nValidation Script # Use the provided validation script to check migration status:\n./scripts/validate-migration.sh This script will:\nCheck that GitRepository sources are ready Verify Helm repositories are available Validate infrastructure components are deployed Review HelmRelease status across namespaces Show recent Flux events Manual Testing Steps # 1. Check Git Sources # flux get sources git kubectl get gitrepository flux-shared-platform -n flux-system -o yaml 2. Verify Helm Repositories # flux get sources helm helm repo list 3. Test Component Deployments # # Check shared components kubectl get kustomizations -n flux-system | grep shared # Check HelmReleases kubectl get helmreleases -A # Verify pods are running kubectl get pods -n cert-manager kubectl get pods -n external-secrets kubectl get pods -n argo-workflows 4. Test Customizations # Verify that cluster-specific patches are working:\n# For argo-workflows, check workflowNamespaces kubectl get helmrelease argo-workflows -n argo-workflows -o jsonpath=\u0026#39;{.spec.values.controller.workflowNamespaces}\u0026#39; # For cert-manager, check custom values kubectl get helmrelease cert-manager -n cert-manager -o yaml 5. Monitor Reconciliation # # Watch reconciliation status flux get kustomizations --watch # Check for reconciliation errors flux logs --follow # Specific component logs flux logs --kind=HelmRelease --name=cert-manager Integration Tests # Create test resources to verify functionality:\n# Test cert-manager with a test certificate apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: test-cert namespace: default spec: secretName: test-cert-tls issuerRef: name: selfsigned-issuer kind: ClusterIssuer dnsNames: - test.example.com --- # Test argo-workflows with a simple workflow apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: test-workflow- namespace: argo-workflows spec: entrypoint: hello templates: - name: hello container: image: alpine:latest command: [echo, \u0026#34;Hello from shared platform!\u0026#34;] Performance Testing # Resource Usage # Monitor resource consumption after migration:\n# Check resource usage by namespace kubectl top pods -A | grep -E \u0026#34;(cert-manager|external-secrets|argo-workflows)\u0026#34; # Check memory and CPU limits kubectl describe pods -n cert-manager Reconciliation Performance # Monitor Flux reconciliation times:\n# Check reconciliation duration flux get kustomizations | grep -E \u0026#34;(shared|cert-manager|external-secrets|argo-workflows)\u0026#34; # Monitor for reconciliation delays kubectl get events -n flux-system | grep -i \u0026#34;reconcil\u0026#34; Troubleshooting Tests # Dependency Failures # Simulate dependency failures:\n# Suspend helm repositories flux suspend source helm jetstack # Observe impact on dependent components flux get kustomizations | grep cert-manager # Resume and verify recovery flux resume source helm jetstack For complete testing procedures including load testing, rollback testing, and continuous testing setup, refer to the full testing documentation in the repository.\n"},{"id":5,"href":"/flux-shared-platform/docs/contributing/","title":"Contributing Guide","section":"Documentation","content":" Contributing Guide # Overview # This repository contains shared GitOps manifests and templates for Kubernetes infrastructure. Contributions should focus on reusable, generic components that can benefit multiple clusters and organizations.\nWhat to Contribute # ✅ Good Contributions # Generic infrastructure component definitions Reusable automation templates Common monitoring and alerting patterns Documentation improvements Bug fixes and security improvements Template parameterization improvements ❌ What Not to Include # Secrets or sensitive data Organization-specific configurations Hardcoded hostnames or domains Private certificates or keys Cluster-specific networking configurations Contribution Process # 1. Fork and Clone # git clone https://github.com/rossigee/flux-shared-platform.git cd flux-shared-platform 2. Create a Branch # git checkout -b feature/your-feature-name 3. Make Changes # Follow the existing directory structure Use template parameters for customizable values Add documentation for new components Test changes in a development environment 4. Template Guidelines # When creating templates:\nUse ALL_CAPS placeholders for variables (e.g., COMPONENT_NAME) Include comments explaining required substitutions Provide reasonable defaults where possible Document any dependencies or prerequisites Example:\n# Replace COMPONENT_NAME with actual component name metadata: name: COMPONENT_NAME namespace: NAMESPACE_NAME # Replace with target namespace 5. Documentation # Update README.md if adding new directories Add usage examples for new components Include security considerations for new features Update this documentation site with new patterns 6. Testing # Before submitting:\nValidate YAML syntax Test templates with actual values Verify no sensitive data is included Check for spelling and grammar errors 7. Submit Pull Request # Provide clear description of changes Reference any related issues Include testing instructions Request review from maintainers Code of Conduct # Be respectful and inclusive Focus on constructive feedback Help others learn and improve Follow security best practices Questions? # Open an issue for questions Check existing documentation first Provide context when asking for help "},{"id":6,"href":"/flux-shared-platform/docs/components/","title":"Component Reference","section":"Documentation","content":" Component Reference # This section provides detailed information about all available infrastructure components in the shared platform.\nCore Infrastructure Components # Certificate Management # cert-manager # Path: ./infrastructure/cert-manager Purpose: Automated certificate lifecycle management Dependencies: jetstack helm repository Customization: Minimal configuration needed for most use cases apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager namespace: flux-system spec: path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform targetNamespace: cert-manager trust-manager (included with cert-manager) # Purpose: CA bundle distribution and trust chain management Integration: Automatically deployed with cert-manager Use case: Distribute internal CA certificates across the cluster Secrets Management # external-secrets # Path: ./infrastructure/external-secrets Purpose: Kubernetes-native secret synchronization Integration: Works with HashiCorp Vault, AWS Secrets Manager, Azure Key Vault Dependencies: external-secrets helm repository apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: external-secrets namespace: flux-system spec: path: ./infrastructure/external-secrets sourceRef: kind: GitRepository name: flux-shared-platform targetNamespace: external-secrets Workflow Orchestration # argo-workflows # Path: ./infrastructure/argo-workflows Purpose: Kubernetes-native workflow engine Use cases: CI/CD pipelines, data processing, backup automation Dependencies: argoproj helm repository Common customization: workflowNamespaces configuration apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: argo-workflows namespace: flux-system spec: path: ./infrastructure/argo-workflows sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;production\u0026#34;, \u0026#34;staging\u0026#34;, \u0026#34;default\u0026#34;] target: kind: HelmRelease name: argo-workflows Monitoring Stack # prometheus-operator # Path: ./infrastructure/prometheus-operator Purpose: Metrics collection and alerting infrastructure Components: Prometheus, Grafana, AlertManager Dependencies: prometheus helm repository kube-state-metrics # Path: ./infrastructure/kube-state-metrics Purpose: Kubernetes cluster state metrics Integration: Works with prometheus-operator Policy and Security # kyverno # Path: ./infrastructure/kyverno Purpose: Policy enforcement and governance Use cases: Security policies, resource validation, mutation Dependencies: kyverno helm repository kubescape # Path: ./infrastructure/kubescape Purpose: Kubernetes security scanning and compliance Integration: Provides security insights and compliance reports Networking # cilium # Path: ./infrastructure/cilium Purpose: Advanced networking and security for Kubernetes Features: Network policies, service mesh, observability Dependencies: cilium helm repository external-dns # Path: ./infrastructure/external-dns Purpose: Automated DNS record management Integration: Works with cert-manager for automated certificate management Storage # csi-driver-lvm # Path: ./infrastructure/csi-driver-lvm Purpose: LVM-based persistent volume provisioning Use case: High-performance local storage Application Management # argocd # Path: ./infrastructure/argocd Purpose: GitOps application deployment and management Separation: Complements Flux CD for application-specific deployments Templates and Patterns # Automation Templates # Path: ./templates/automation/ Components: Discord notifications, image update automation, webhook receivers Use case: Extend Flux CD with custom automation workflows Monitoring Templates # Path: ./templates/monitoring/ Components: Prometheus rules, scrape configs, alert definitions Categories: Infrastructure, application, security, and network monitoring RBAC Templates # Path: ./templates/rbac/ Components: Service accounts, role definitions, SSO integration Use case: Standardized permission patterns Networking Templates # Path: ./templates/networking/ Components: Ingress patterns, network policies, service definitions Use case: Secure networking configurations Helm Repositories # The shared platform includes definitions for common Helm repositories:\njetstack: cert-manager charts external-secrets: External secrets operator charts argoproj: Argo project charts (workflows, CD, events) prometheus: Prometheus community charts kyverno: Policy engine charts cilium: Networking charts grafana: Grafana and related charts Usage Patterns # Basic Component Deployment # apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: COMPONENT_NAME namespace: flux-system spec: interval: 30m path: ./infrastructure/COMPONENT_NAME sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: COMPONENT_NAMESPACE Component with Customization # apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: COMPONENT_NAME-custom namespace: flux-system spec: interval: 30m path: ./infrastructure/COMPONENT_NAME sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/SETTING_PATH value: CUSTOM_VALUE target: kind: HelmRelease name: COMPONENT_NAME Integration Examples # See the examples/ directory in the repository for complete integration examples including:\nMulti-cluster deployments Environment-specific configurations Complete monitoring stacks Security policy implementations Next Steps # Review the Usage Guide for deployment best practices Check the Migration Guide for transitioning existing infrastructure Use the Testing Guide to validate your deployments Explore the examples directory for real-world usage patterns "},{"id":7,"href":"/flux-shared-platform/docs/examples/","title":"Examples","section":"Documentation","content":" Examples # Real-world examples of using the Flux Shared Platform components.\nComplete Cluster Setup # Basic Production Cluster # Here\u0026rsquo;s a complete example of setting up a production Kubernetes cluster with essential components:\n# 1. Add the shared platform source apiVersion: source.toolkit.fluxcd.io/v1 kind: GitRepository metadata: name: flux-shared-platform namespace: flux-system spec: interval: 10m ref: branch: main url: https://github.com/rossigee/flux-shared-platform --- # 2. Deploy helm repositories first apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: shared-helm-repos namespace: flux-system spec: interval: 30m path: ./helm-repos sourceRef: kind: GitRepository name: flux-shared-platform prune: true --- # 3. Certificate management apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager namespace: flux-system spec: interval: 30m path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: cert-manager --- # 4. Secrets management apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: external-secrets namespace: flux-system spec: interval: 30m path: ./infrastructure/external-secrets sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: external-secrets --- # 5. Monitoring stack apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: prometheus-operator namespace: flux-system spec: interval: 30m path: ./infrastructure/prometheus-operator sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: monitoring --- # 6. Policy enforcement apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: kyverno namespace: flux-system spec: interval: 30m path: ./infrastructure/kyverno sourceRef: kind: GitRepository name: flux-shared-platform dependsOn: - name: shared-helm-repos targetNamespace: kyverno Environment-Specific Customizations # Development Environment # # Development cluster with relaxed security for faster iteration apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: argo-workflows-dev namespace: flux-system spec: interval: 10m # Faster sync for development path: ./infrastructure/argo-workflows sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;default\u0026#34;, \u0026#34;development\u0026#34;, \u0026#34;testing\u0026#34;] - op: replace path: /spec/values/server/secure value: false # Disable HTTPS for local development target: kind: HelmRelease name: argo-workflows Production Environment # # Production cluster with enhanced security and monitoring apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: argo-workflows-prod namespace: flux-system spec: interval: 30m # Slower sync for stability path: ./infrastructure/argo-workflows sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;production\u0026#34;] - op: replace path: /spec/values/server/secure value: true - op: add path: /spec/values/controller/resources value: requests: cpu: 500m memory: 1Gi limits: cpu: 1000m memory: 2Gi target: kind: HelmRelease name: argo-workflows Multi-Cluster Deployments # Shared Services Cluster # # Cluster dedicated to shared services (monitoring, secrets management) --- apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: shared-monitoring namespace: flux-system spec: path: ./infrastructure/prometheus-operator sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/prometheus/prometheusSpec/retention value: \u0026#34;90d\u0026#34; # Longer retention for central monitoring - op: replace path: /spec/values/prometheus/prometheusSpec/storage/volumeClaimTemplate/spec/resources/requests/storage value: \u0026#34;500Gi\u0026#34; target: kind: HelmRelease name: prometheus-operator Application Clusters # # Application clusters with minimal monitoring (metrics forwarded to shared cluster) apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: lightweight-monitoring namespace: flux-system spec: path: ./infrastructure/prometheus-operator sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/prometheus/prometheusSpec/retention value: \u0026#34;7d\u0026#34; # Short retention, forward to central - op: add path: /spec/values/prometheus/prometheusSpec/remoteWrite value: - url: https://shared-monitoring.example.com/api/v1/write target: kind: HelmRelease name: prometheus-operator Security Configurations # High Security Environment # # Enhanced security configuration with policy enforcement apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: security-policies namespace: flux-system spec: path: ./infrastructure/kyverno-policies sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/validationFailureAction value: enforce # Block non-compliant resources target: kind: ClusterPolicy name: disallow-privileged-containers Network Security # # Cilium with enhanced network policies apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cilium-secure namespace: flux-system spec: path: ./infrastructure/cilium sourceRef: kind: GitRepository name: flux-shared-platform patches: - patch: | - op: replace path: /spec/values/hubble/enabled value: true - op: replace path: /spec/values/hubble/relay/enabled value: true - op: replace path: /spec/values/hubble/ui/enabled value: true target: kind: HelmRelease name: cilium Integration Patterns # GitOps with External Secrets # # External secrets integrated with HashiCorp Vault apiVersion: external-secrets.io/v1beta1 kind: SecretStore metadata: name: vault-backend namespace: external-secrets spec: provider: vault: server: \u0026#34;https://vault.example.com\u0026#34; path: \u0026#34;secret\u0026#34; version: \u0026#34;v2\u0026#34; auth: kubernetes: mountPath: \u0026#34;kubernetes\u0026#34; role: \u0026#34;external-secrets\u0026#34; --- apiVersion: external-secrets.io/v1beta1 kind: ExternalSecret metadata: name: database-credentials namespace: production spec: refreshInterval: 15s secretStoreRef: name: vault-backend kind: SecretStore target: name: database-credentials creationPolicy: Owner data: - secretKey: username remoteRef: key: database/production property: username - secretKey: password remoteRef: key: database/production property: password Monitoring Integration # # Custom monitoring for your applications apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: my-app-metrics namespace: monitoring spec: selector: matchLabels: app: my-application endpoints: - port: metrics interval: 30s path: /metrics --- apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: my-app-alerts namespace: monitoring spec: groups: - name: my-app.rules rules: - alert: MyAppDown expr: up{job=\u0026#34;my-application\u0026#34;} == 0 for: 5m annotations: summary: \u0026#34;My application is down\u0026#34; Cloud Provider Specific Examples # The examples/ directory in the repository contains detailed examples for:\nAWS: EKS-specific configurations with ALB ingress, EBS CSI, and IAM roles Azure: AKS-specific configurations with Azure DNS and Key Vault integration GCP: GKE-specific configurations with Cloud DNS and Secret Manager On-premises: Bare metal Kubernetes with MetalLB and local storage Testing Examples # For testing and validation examples, see the Testing Guide which includes:\nHealth check manifests Load testing configurations Rollback procedures Monitoring validation More Examples # Browse the complete examples directory in the repository:\nRepository Examples Each example includes:\nComplete configuration files Deployment instructions Customization options Testing procedures "}]