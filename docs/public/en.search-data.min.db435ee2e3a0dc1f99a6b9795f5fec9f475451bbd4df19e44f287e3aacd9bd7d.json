[{"id":0,"href":"/flux-shared-platform/docs/","title":"Documentation","section":"Flux Shared Platform","content":" Documentation # This section contains comprehensive documentation for the Flux Shared Platform, including usage guides, migration instructions, testing procedures, and contributing guidelines.\nSections # Usage Guide - How to use the shared platform in your clusters Migration Guide - Migrating from duplicated manifests to shared components Testing Guide - Validation and testing procedures Contributing Guide - Guidelines for contributing to the project "},{"id":1,"href":"/flux-shared-platform/docs/usage/","title":"Usage Guide","section":"Documentation","content":" Usage Guide # Getting Started # 1. Add as Git Source # First, add the shared platform repository as a GitRepository source in your Flux configuration:\napiVersion: source.toolkit.fluxcd.io/v1 kind: GitRepository metadata: name: flux-shared-platform namespace: flux-system spec: interval: 10m ref: branch: main url: https://github.com/rossigee/flux-shared-platform 2. Use Shared Infrastructure Components # Reference shared infrastructure components in your Kustomizations:\napiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager namespace: flux-system spec: interval: 30m path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform targetNamespace: cert-manager 3. Customize with Patches # Use Kustomize patches to customize shared components for your cluster:\napiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: argo-workflows spec: # ... other fields ... patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;production\u0026#34;, \u0026#34;staging\u0026#34;] target: kind: HelmRelease name: argo-workflows Available Components # Infrastructure Components # cert-manager: Certificate management external-secrets: External secrets operator argo-workflows: Workflow engine Templates # automation/: Image update automation and Discord notifications kustomization/: Common kustomization patterns monitoring/: Prometheus rules and scrape configs rbac/: RBAC templates for SSO and service accounts networking/: Ingress and NetworkPolicy templates Best Practices # Security # Never include secrets in shared configurations Use External Secrets or sealed secrets for sensitive data Review all templates before applying to production Use least-privilege RBAC configurations Customization # Use Kustomize patches instead of forking shared components Keep cluster-specific configurations in your private repository Version pin shared components for stability Test changes in staging environments first Monitoring # Customize monitoring templates for your environment Add cluster-specific alerting rules Configure notification channels appropriately Monitor resource usage and scaling Examples # See the examples/ directory for:\nComplete cluster configurations Component usage patterns Customization examples Integration patterns "},{"id":2,"href":"/flux-shared-platform/docs/migration/","title":"Migration Guide","section":"Documentation","content":" Migration Guide # This guide helps you migrate from duplicated infrastructure manifests to the shared platform components.\nPrerequisites # Existing Flux CD installation Access to modify cluster GitOps repositories Understanding of Kustomize patches Migration Steps # 1. Add Shared Platform Source # Add the shared platform as a GitRepository source:\napiVersion: source.toolkit.fluxcd.io/v1 kind: GitRepository metadata: name: flux-shared-platform namespace: flux-system spec: interval: 20m ref: branch: main url: https://github.com/rossigee/flux-shared-platform 2. Deploy Helm Repositories First # Deploy shared helm repositories before infrastructure components:\napiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: helm-repos namespace: flux-system spec: interval: 30m path: ./helm-repos sourceRef: kind: GitRepository name: flux-shared-platform 3. Migrate Components Gradually # For each component, follow this pattern:\nBefore (Duplicated) # apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager spec: path: ./clusters/production/cert-manager sourceRef: kind: GitRepository name: my-cluster-repo After (Shared + Override) # # Deploy shared component apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager-shared spec: dependsOn: - name: helm-repos path: ./infrastructure/cert-manager sourceRef: kind: GitRepository name: flux-shared-platform targetNamespace: cert-manager --- # Deploy cluster-specific overrides apiVersion: kustomize.toolkit.fluxcd.io/v1 kind: Kustomization metadata: name: cert-manager spec: dependsOn: - name: cert-manager-shared path: ./clusters/production/cert-manager sourceRef: kind: GitRepository name: my-cluster-repo targetNamespace: cert-manager 4. Update Cluster-Specific Kustomizations # Remove infrastructure references from cluster kustomizations:\nBefore # apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - ../../../infrastructure/cert-manager # Remove this - automation.yaml - namespace.yaml After # apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - automation.yaml - namespace.yaml # Shared component deployed via cert-manager-shared kustomization 5. Update Dependencies # Update all component dependencies to reference shared versions:\n# Change from: dependsOn: - name: cert-manager # To: dependsOn: - name: cert-manager-shared Component-Specific Migration # Cert-Manager # No customization typically needed Keep cluster-specific automation and namespaces External-Secrets # Update chart version references Maintain cluster-specific CA certificates and secrets Argo Workflows # Customize workflowNamespaces using patches: patches: - patch: | - op: replace path: /spec/values/controller/workflowNamespaces value: [\u0026#34;production\u0026#34;, \u0026#34;staging\u0026#34;] target: kind: HelmRelease name: argo-workflows Testing Strategy # Start with staging environments Deploy one component at a time Verify functionality before proceeding Monitor for reconciliation errors Test cluster-specific customizations Rollback Plan # If issues occur, you can quickly rollback by:\nSuspending shared component kustomizations Re-enabling original infrastructure references Removing shared platform GitRepository source Troubleshooting # Common Issues # Reconciliation Loops\nEnsure old infrastructure references are removed Check for conflicting resource ownership Missing Dependencies\nVerify helm repositories are deployed first Check dependency chains in kustomizations Version Conflicts\nUpdate shared platform to match your current versions Use patches to override specific values Monitoring # Watch Flux reconciliation status:\nflux get kustomizations flux get helmreleases flux logs --follow Benefits After Migration # Reduced Duplication: ~60-70% fewer manifests to maintain Consistency: Shared components ensure uniform configurations Updates: Centralized component version management Community: Contribute and benefit from shared improvements "},{"id":3,"href":"/flux-shared-platform/docs/testing/","title":"Testing Guide","section":"Documentation","content":" Testing Guide # This guide provides instructions for testing the flux-shared-platform migration and components.\nValidation Script # Use the provided validation script to check migration status:\n./scripts/validate-migration.sh This script will:\nCheck that GitRepository sources are ready Verify Helm repositories are available Validate infrastructure components are deployed Review HelmRelease status across namespaces Show recent Flux events Manual Testing Steps # 1. Check Git Sources # flux get sources git kubectl get gitrepository flux-shared-platform -n flux-system -o yaml 2. Verify Helm Repositories # flux get sources helm helm repo list 3. Test Component Deployments # # Check shared components kubectl get kustomizations -n flux-system | grep shared # Check HelmReleases kubectl get helmreleases -A # Verify pods are running kubectl get pods -n cert-manager kubectl get pods -n external-secrets kubectl get pods -n argo-workflows 4. Test Customizations # Verify that cluster-specific patches are working:\n# For argo-workflows, check workflowNamespaces kubectl get helmrelease argo-workflows -n argo-workflows -o jsonpath=\u0026#39;{.spec.values.controller.workflowNamespaces}\u0026#39; # For cert-manager, check custom values kubectl get helmrelease cert-manager -n cert-manager -o yaml 5. Monitor Reconciliation # # Watch reconciliation status flux get kustomizations --watch # Check for reconciliation errors flux logs --follow # Specific component logs flux logs --kind=HelmRelease --name=cert-manager Integration Tests # Create test resources to verify functionality:\n# Test cert-manager with a test certificate apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: test-cert namespace: default spec: secretName: test-cert-tls issuerRef: name: selfsigned-issuer kind: ClusterIssuer dnsNames: - test.example.com --- # Test argo-workflows with a simple workflow apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: test-workflow- namespace: argo-workflows spec: entrypoint: hello templates: - name: hello container: image: alpine:latest command: [echo, \u0026#34;Hello from shared platform!\u0026#34;] Performance Testing # Resource Usage # Monitor resource consumption after migration:\n# Check resource usage by namespace kubectl top pods -A | grep -E \u0026#34;(cert-manager|external-secrets|argo-workflows)\u0026#34; # Check memory and CPU limits kubectl describe pods -n cert-manager Reconciliation Performance # Monitor Flux reconciliation times:\n# Check reconciliation duration flux get kustomizations | grep -E \u0026#34;(shared|cert-manager|external-secrets|argo-workflows)\u0026#34; # Monitor for reconciliation delays kubectl get events -n flux-system | grep -i \u0026#34;reconcil\u0026#34; Troubleshooting Tests # Dependency Failures # Simulate dependency failures:\n# Suspend helm repositories flux suspend source helm jetstack # Observe impact on dependent components flux get kustomizations | grep cert-manager # Resume and verify recovery flux resume source helm jetstack For complete testing procedures including load testing, rollback testing, and continuous testing setup, refer to the full testing documentation in the repository.\n"},{"id":4,"href":"/flux-shared-platform/docs/contributing/","title":"Contributing Guide","section":"Documentation","content":" Contributing Guide # Overview # This repository contains shared GitOps manifests and templates for Kubernetes infrastructure. Contributions should focus on reusable, generic components that can benefit multiple clusters and organizations.\nWhat to Contribute # ✅ Good Contributions # Generic infrastructure component definitions Reusable automation templates Common monitoring and alerting patterns Documentation improvements Bug fixes and security improvements Template parameterization improvements ❌ What Not to Include # Secrets or sensitive data Organization-specific configurations Hardcoded hostnames or domains Private certificates or keys Cluster-specific networking configurations Contribution Process # 1. Fork and Clone # git clone https://github.com/rossigee/flux-shared-platform.git cd flux-shared-platform 2. Create a Branch # git checkout -b feature/your-feature-name 3. Make Changes # Follow the existing directory structure Use template parameters for customizable values Add documentation for new components Test changes in a development environment 4. Template Guidelines # When creating templates:\nUse ALL_CAPS placeholders for variables (e.g., COMPONENT_NAME) Include comments explaining required substitutions Provide reasonable defaults where possible Document any dependencies or prerequisites Example:\n# Replace COMPONENT_NAME with actual component name metadata: name: COMPONENT_NAME namespace: NAMESPACE_NAME # Replace with target namespace 5. Documentation # Update README.md if adding new directories Add usage examples for new components Include security considerations for new features Update this documentation site with new patterns 6. Testing # Before submitting:\nValidate YAML syntax Test templates with actual values Verify no sensitive data is included Check for spelling and grammar errors 7. Submit Pull Request # Provide clear description of changes Reference any related issues Include testing instructions Request review from maintainers Code of Conduct # Be respectful and inclusive Focus on constructive feedback Help others learn and improve Follow security best practices Questions? # Open an issue for questions Check existing documentation first Provide context when asking for help "}]