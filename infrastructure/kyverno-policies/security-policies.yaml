---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-pod-security-standards
  annotations:
    policies.kyverno.io/title: "Pod Security Standards"
    policies.kyverno.io/category: "Pod Security"
    policies.kyverno.io/severity: "high"
    policies.kyverno.io/description: >-
      Enforces pod security standards: disallows privileged containers,
      requires non-root execution, blocks host network/PID access,
      and mandates security contexts on all workloads.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    # Disallow privileged containers
    - name: check-privileged
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            - StatefulSet
            - Job
            operations:
            - CREATE
            - UPDATE
      validate:
        message: "Privileged containers are not allowed"
        pattern:
          spec:
            =(securityContext):
              =(privileged): "false"
            containers:
            - =(securityContext):
                =(privileged): "false"

    # Require non-root containers
    - name: require-run-as-non-root
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            - StatefulSet
            - Job
            operations:
            - CREATE
            - UPDATE
      exclude:
        resources:
          namespaces:
          - kube-system
          - cert-manager
          - longhorn-system
      validate:
        message: "Containers must run as non-root"
        pattern:
          spec:
            =(securityContext):
              runAsNonRoot: true
            containers:
            - =(securityContext):
                =(runAsNonRoot): true

    # Disallow host network
    - name: disallow-host-network
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            operations:
            - CREATE
            - UPDATE
      exclude:
        resources:
          namespaces:
          - kube-system
          - cilium
      validate:
        message: "Host network is not allowed"
        pattern:
          spec:
            =(hostNetwork): "false"

    # Disallow host PID
    - name: disallow-host-pid
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            operations:
            - CREATE
            - UPDATE
      validate:
        message: "Host PID is not allowed"
        pattern:
          spec:
            =(hostPID): "false"

    # Require security context
    - name: require-security-context
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            - StatefulSet
            - Job
            operations:
            - CREATE
            - UPDATE
      validate:
        message: "Security context is required"
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.securityContext || '' }}"
              operator: Equals
              value: ""
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-resource-limits
  annotations:
    policies.kyverno.io/title: "Resource Requirements"
    policies.kyverno.io/category: "Best Practices"
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/description: >-
      Requires all containers in Deployments, StatefulSets, and DaemonSets
      to define CPU and memory requests and limits to ensure proper resource
      allocation and prevent resource starvation.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    # Require resource requests and limits
    - name: validate-resources
      match:
        any:
        - resources:
            kinds:
            - Deployment
            - StatefulSet
            - DaemonSet
            operations:
            - CREATE
            - UPDATE
      exclude:
        resources:
          namespaces:
          - kube-system
          - flux-system
      validate:
        message: "Resource requests and limits are required"
        pattern:
          spec:
            template:
              spec:
                containers:
                - name: "*"
                  resources:
                    requests:
                      memory: "?*"
                      cpu: "?*"
                    limits:
                      memory: "?*"
                      cpu: "?*"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-default-namespace
  annotations:
    policies.kyverno.io/title: "Disallow Default Namespace"
    policies.kyverno.io/category: "Best Practices"
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/description: >-
      Prevents creation of resources in the 'default' namespace to encourage
      proper namespace organization and avoid accidental deployments.
      Allows deletion of all resources except the default kubernetes service.
spec:
  validationFailureAction: Enforce
  background: false
  rules:
    - name: disallow-default-namespace-creation
      match:
        any:
        - resources:
            kinds:
            - "*"
            namespaces:
            - default
            operations:
            - CREATE
            - UPDATE
      exclude:
        any:
        - resources:
            kinds:
            - Service
            names:
            - kubernetes
      validate:
        message: "Creating or updating resources in 'default' namespace is not allowed"
        deny: {}
    - name: protect-default-kubernetes-service
      match:
        any:
        - resources:
            kinds:
            - Service
            names:
            - kubernetes
            namespaces:
            - default
            operations:
            - DELETE
      validate:
        message: "Deleting the default 'kubernetes' service is not allowed"
        deny: {}
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-network-policies
  annotations:
    policies.kyverno.io/title: "Require Network Policies"
    policies.kyverno.io/category: "Network Security"
    policies.kyverno.io/severity: "low"
    policies.kyverno.io/description: >-
      Validates that namespaces have network policies defined (audit mode).
      Checks for 'network-policy: enabled' label to ensure network
      segmentation is properly configured.
spec:
  validationFailureAction: Audit  # Start with audit mode
  background: true
  rules:
    - name: check-network-policy
      match:
        any:
        - resources:
            kinds:
            - Namespace
      exclude:
        resources:
          namespaces:
          - kube-system
          - kube-public
          - kube-node-lease
          - default
      validate:
        message: "Namespace should have NetworkPolicy defined"
        pattern:
          metadata:
            labels:
              network-policy: "enabled"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-latest-tag
  annotations:
    policies.kyverno.io/title: "Disallow Latest Tag"
    policies.kyverno.io/category: "Best Practices"
    policies.kyverno.io/severity: "high"
    policies.kyverno.io/description: >-
      Prevents use of ':latest' tag and encourages specific version tags
      or SHA digests for container images to ensure reproducible deployments
      and avoid unexpected updates.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: require-image-tag
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - StatefulSet
            - DaemonSet
            - Job
            - CronJob
      validate:
        message: "Images must specify a tag and not use ':latest'"
        pattern:
          spec:
            containers:
            - image: "!*:latest"
            =(initContainers):
            - image: "!*:latest"
    - name: require-digest-or-semver
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - StatefulSet
            - DaemonSet
            - Job
            - CronJob
      exclude:
        resources:
          namespaces:
          - flux-system  # Flux handles image automation
      validate:
        message: "Images should use digest (@sha256:...) or semantic version tags"
        pattern:
          spec:
            containers:
            - image: "*:?*"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-pod-probes
  annotations:
    policies.kyverno.io/title: "Require Pod Probes"
    policies.kyverno.io/category: "Best Practices"
    policies.kyverno.io/severity: "low"
    policies.kyverno.io/description: >-
      Requires liveness and readiness probes on containers in Deployments,
      StatefulSets, and DaemonSets to ensure proper health checking and
      traffic management (audit mode).
spec:
  validationFailureAction: Audit  # Start with audit to identify violations
  background: true
  rules:
    - name: validate-livenessProbe
      match:
        any:
        - resources:
            kinds:
            - Deployment
            - StatefulSet
            - DaemonSet
      exclude:
        resources:
          namespaces:
          - kube-system
          - flux-system
      validate:
        message: "Liveness probe is required"
        pattern:
          spec:
            template:
              spec:
                containers:
                - livenessProbe:
                    "?*"
    - name: validate-readinessProbe
      match:
        any:
        - resources:
            kinds:
            - Deployment
            - StatefulSet
      exclude:
        resources:
          namespaces:
          - kube-system
          - flux-system
      validate:
        message: "Readiness probe is required for services"
        pattern:
          spec:
            template:
              spec:
                containers:
                - readinessProbe:
                    "?*"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-external-secrets-management
  annotations:
    policies.kyverno.io/title: "Require External Secrets Management"
    policies.kyverno.io/category: "Security"
    policies.kyverno.io/severity: "high"
    policies.kyverno.io/description: >-
      Prevents creation of manual secrets and ensures all secrets are managed
      by External Secrets Operator or other approved secret management systems.
      This prevents hardcoded secrets and promotes proper secret lifecycle management.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: require-managed-secrets
      match:
        any:
        - resources:
            kinds:
            - Secret
            operations:
            - CREATE
            - UPDATE
      exclude:
        any:
        # Allow system secrets
        - resources:
            namespaces:
            - kube-system
            - kube-public
            - kube-node-lease
        # Allow service account tokens
        - resources:
            kinds:
            - Secret
            names:
            - "*-token-*"
        # Allow TLS secrets managed by cert-manager
        - resources:
            kinds:
            - Secret
        conditions:
        - key: "{{ request.object.metadata.annotations.'cert-manager.io/issuer-name' || '' }}"
          operator: NotEquals
          value: ""
        # Allow Helm secrets
        - resources:
            kinds:
            - Secret
        conditions:
        - key: "{{ request.object.metadata.labels.'owner' || '' }}"
          operator: Equals
          value: "helm"
      validate:
        message: "Manual secrets are not allowed. Use External Secrets Operator or other approved secret management."
        deny:
          conditions:
            all:
            # Deny if not managed by external-secrets
            - key: "{{ request.object.metadata.annotations.'external-secrets.io/managed-by' || '' }}"
              operator: Equals
              value: ""
            # And not managed by sealed-secrets
            - key: "{{ request.object.metadata.annotations.'sealedsecrets.bitnami.com/managed' || '' }}"
              operator: Equals
              value: ""
            # And not a bootstrap secret (allowed pattern)
            - key: "{{ request.object.metadata.name }}"
              operator: NotIn
              value: ["bootstrap-*", "*-bootstrap", "flux-system"]
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enhance-pod-security-standards
  annotations:
    policies.kyverno.io/title: "Enhanced Pod Security Standards"
    policies.kyverno.io/category: "Pod Security"
    policies.kyverno.io/severity: "high"
    policies.kyverno.io/description: >-
      Enforces enhanced pod security standards including seccomp profiles,
      capability restrictions, and filesystem controls to meet CIS Kubernetes
      Benchmark and NSA Kubernetes Hardening Guide requirements.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    # Require seccomp profile
    - name: require-seccomp-profile
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            - StatefulSet
            - Job
            operations:
            - CREATE
            - UPDATE
      exclude:
        resources:
          namespaces:
          - kube-system
          - cilium
      validate:
        message: "Seccomp profile is required (RuntimeDefault or Localhost)"
        pattern:
          spec:
            =(securityContext):
              seccompProfile:
                type: "RuntimeDefault | Localhost"
            containers:
            - =(securityContext):
                =(seccompProfile):
                  type: "RuntimeDefault | Localhost"

    # Restrict capabilities
    - name: restrict-capabilities
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - DaemonSet
            - StatefulSet
            - Job
            operations:
            - CREATE
            - UPDATE
      exclude:
        resources:
          namespaces:
          - kube-system
          - cilium
          - longhorn-system
      validate:
        message: "Containers must drop ALL capabilities and only add specific required ones"
        pattern:
          spec:
            containers:
            - =(securityContext):
                =(capabilities):
                  drop:
                  - "ALL"
                  =(add): 
                  - "NET_BIND_SERVICE | CHOWN | DAC_OVERRIDE | FOWNER | SETGID | SETUID | SYS_CHROOT"

    # Require read-only root filesystem
    - name: require-read-only-root-filesystem
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - StatefulSet
            - Job
            operations:
            - CREATE
            - UPDATE
      exclude:
        resources:
          namespaces:
          - kube-system
          - flux-system
      validate:
        message: "Containers should use read-only root filesystem (audit mode)"
        validationFailureAction: Audit
        pattern:
          spec:
            containers:
            - =(securityContext):
                =(readOnlyRootFilesystem): true
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-trusted-registries
  annotations:
    policies.kyverno.io/title: "Require Trusted Container Registries"
    policies.kyverno.io/category: "Supply Chain Security"
    policies.kyverno.io/severity: "high"
    policies.kyverno.io/description: >-
      Restricts container images to approved registries to prevent supply chain
      attacks and ensure images come from trusted sources. Supports internal
      registry, major cloud providers, and approved public registries.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: validate-trusted-registries
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - StatefulSet
            - DaemonSet
            - Job
            - CronJob
            operations:
            - CREATE
            - UPDATE
      validate:
        message: "Images must come from organization-approved registries and repositories"
        pattern:
          spec:
            containers:
            # Internal/Corporate registries (most trusted)
            - image: "registry.acme.com/* | harbor.acme.com/*"
            # OR specific approved repositories from public registries
            - image: "ghcr.io/acme-corp/* | ghcr.io/fluxcd/* | ghcr.io/argoproj/* | ghcr.io/grafana/* | ghcr.io/prometheus/*"
            # OR specific Kubernetes/CNCF projects
            - image: "registry.k8s.io/* | k8s.gcr.io/*"
            # OR specific approved base images only
            - image: "docker.io/library/alpine:* | docker.io/library/ubuntu:* | docker.io/library/nginx:* | docker.io/library/postgres:*"
            # OR specific cloud provider managed images
            - image: "gcr.io/distroless/* | public.ecr.aws/lambda/*"
            # OR Red Hat certified images
            - image: "registry.redhat.io/ubi8/* | registry.redhat.io/ubi9/*"
            =(initContainers):
            # Same restrictions for init containers
            - image: "registry.acme.com/* | harbor.acme.com/*"
            - image: "ghcr.io/acme-corp/* | ghcr.io/fluxcd/* | ghcr.io/argoproj/* | ghcr.io/grafana/* | ghcr.io/prometheus/*"
            - image: "registry.k8s.io/* | k8s.gcr.io/*"
            - image: "docker.io/library/alpine:* | docker.io/library/ubuntu:* | docker.io/library/nginx:* | docker.io/library/postgres:*"
            - image: "gcr.io/distroless/* | public.ecr.aws/lambda/*"
            - image: "registry.redhat.io/ubi8/* | registry.redhat.io/ubi9/*"
    
    # Additional rule to block known problematic registries
    - name: block-untrusted-registries
      match:
        any:
        - resources:
            kinds:
            - Pod
            - Deployment
            - StatefulSet
            - DaemonSet
            - Job
            - CronJob
            operations:
            - CREATE
            - UPDATE
      validate:
        message: "Images from untrusted or anonymous registries are not allowed"
        deny:
          conditions:
            any:
            # Block Docker Hub user repositories (only allow library/)
            - key: "{{ request.object.spec.containers[?starts_with(@.image, 'docker.io/') && !starts_with(@.image, 'docker.io/library/')] | length(@) }}"
              operator: GreaterThan
              value: 0
            # Block Quay.io user repositories (require organization approval)
            - key: "{{ request.object.spec.containers[?starts_with(@.image, 'quay.io/') && !starts_with(@.image, 'quay.io/acme-corp/')] | length(@) }}"
              operator: GreaterThan
              value: 0
            # Block localhost/development registries in production
            - key: "{{ request.object.spec.containers[?starts_with(@.image, 'localhost/') || starts_with(@.image, '127.0.0.1') || starts_with(@.image, '192.168.')] | length(@) }}"
              operator: GreaterThan
              value: 0
