---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: lvm-node-exporter
  namespace: lvm-monitoring
  labels:
    app: lvm-node-exporter
spec:
  selector:
    matchLabels:
      app: lvm-node-exporter
  template:
    metadata:
      labels:
        app: lvm-node-exporter
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: lvm-monitor
      tolerations:
      - operator: Exists
        effect: NoSchedule
      containers:
      - name: lvm-exporter
        image: PRIVATE_REGISTRY/infrastructure/lvm-monitor:alpine-v1.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true  # Required for LVM commands
          runAsUser: 0      # Must run as root for hardware access
        command:
        - /bin/sh
        - -c
        - |
          # Install LVM tools (not included in our alpine image)
          apk add --no-cache lvm2

          # Create metrics directory
          mkdir -p /metrics

          # Configure mc for metrics upload (optional)
          if [ -n "$S3_ENDPOINT" ] && [ -n "$AWS_ACCESS_KEY_ID" ]; then
            mc alias set metrics-minio "$S3_ENDPOINT" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" --insecure 2>/dev/null
          fi

          # Main monitoring loop
          while true; do
            TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            HOSTNAME=$(hostname)
            
            # Collect LVM metrics
            echo "Collecting LVM metrics on $HOSTNAME..."
            
            # Get VG information
            VG_INFO=$(vgs --reportformat json 2>/dev/null || echo '{"report":[]}')
            
            # Get LV information
            LV_INFO=$(lvs --reportformat json 2>/dev/null || echo '{"report":[]}')
            
            # Get PV information
            PV_INFO=$(pvs --reportformat json 2>/dev/null || echo '{"report":[]}')
            
            # Generate node metrics in Prometheus format
            cat > /metrics/node_exporter.prom <<EOF
          # HELP node_lvm_vg_size_bytes Total size of volume group in bytes
          # TYPE node_lvm_vg_size_bytes gauge
          # HELP node_lvm_vg_free_bytes Free space in volume group in bytes
          # TYPE node_lvm_vg_free_bytes gauge
          # HELP node_lvm_lv_size_bytes Size of logical volume in bytes
          # TYPE node_lvm_lv_size_bytes gauge
          EOF
            
            # Parse VG metrics
            echo "$VG_INFO" | jq -r '.report[0].vg[]? | 
              "node_lvm_vg_size_bytes{hostname=\"'$HOSTNAME'\",vg_name=\"\(.vg_name)\"} \(.vg_size | gsub("[^0-9]"; "") | tonumber)
          node_lvm_vg_free_bytes{hostname=\"'$HOSTNAME'\",vg_name=\"\(.vg_name)\"} \(.vg_free | gsub("[^0-9]"; "") | tonumber)"' >> /metrics/node_exporter.prom 2>/dev/null || true
            
            # Parse LV metrics
            echo "$LV_INFO" | jq -r '.report[0].lv[]? | 
              "node_lvm_lv_size_bytes{hostname=\"'$HOSTNAME'\",vg_name=\"\(.vg_name)\",lv_name=\"\(.lv_name)\"} \(.lv_size | gsub("[^0-9]"; "") | tonumber)"' >> /metrics/node_exporter.prom 2>/dev/null || true
            
            # Generate JSON report
            cat > /metrics/lvm-node-${HOSTNAME}.json <<EOF
          {
            "timestamp": "$TIMESTAMP",
            "hostname": "$HOSTNAME",
            "vgs": $VG_INFO,
            "lvs": $LV_INFO,
            "pvs": $PV_INFO
          }
          EOF
            
            # Calculate VG usage percentage for alerting
            VG_USAGE=$(echo "$VG_INFO" | jq -r '.report[0].vg[]? | 
              select(.vg_free and .vg_size) | 
              (100 - ((.vg_free | gsub("[^0-9]"; "") | tonumber) / (.vg_size | gsub("[^0-9]"; "") | tonumber) * 100))' 2>/dev/null | head -1)
            
            if [ -n "$VG_USAGE" ]; then
              echo "Volume group usage: ${VG_USAGE}%"
              
              # Alert if usage is high
              if (( $(echo "$VG_USAGE > 80" | bc -l) )); then
                echo "WARNING: Volume group usage is above 80%!"
              fi
            fi
            
            # Optional: Upload metrics to MinIO
            if [ -n "$S3_ENDPOINT" ] && [ -f /metrics/lvm-node-${HOSTNAME}.json ]; then
              mc cp /metrics/lvm-node-${HOSTNAME}.json "metrics-minio/${S3_BUCKET}/nodes/${HOSTNAME}/lvm-$(date +%Y%m%d-%H%M%S).json" --insecure 2>/dev/null || true
            fi
            
            # Optional: Push to Prometheus Pushgateway
            if [ -n "$PROMETHEUS_PUSH_GATEWAY" ] && [ -f /metrics/node_exporter.prom ]; then
              cat /metrics/node_exporter.prom | curl -s -X POST --data-binary @- "${PROMETHEUS_PUSH_GATEWAY}/metrics/job/lvm-node-exporter/instance/${HOSTNAME}" || true
            fi
            
            # Sleep for 5 minutes
            sleep 300
          done
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PROMETHEUS_PUSH_GATEWAY
          value: "http://prometheus-pushgateway.monitoring.svc.cluster.local:9091"
        envFrom:
        - secretRef:
            name: lvm-reports-minio
            optional: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: metrics
          mountPath: /metrics
        - name: dev
          mountPath: /dev
        - name: sys
          mountPath: /sys
      volumes:
      - name: metrics
        emptyDir: {}
      - name: dev
        hostPath:
          path: /dev
      - name: sys
        hostPath:
          path: /sys
      imagePullSecrets:
      - name: container-repo-auth